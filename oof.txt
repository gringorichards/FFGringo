# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=80)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class DfCaptains(models.Model):
    index = models.BigIntegerField(blank=True, null=True)
    element = models.BigIntegerField(blank=True, null=True)
    is_captain = models.BooleanField(blank=True, null=True)
    is_vice_captain = models.BooleanField(blank=True, null=True)
    multiplier = models.BigIntegerField(blank=True, null=True)
    position = models.BigIntegerField(blank=True, null=True)
    entry = models.BigIntegerField(blank=True, null=True)
    round = models.BigIntegerField(blank=True, null=True)
    assists = models.BigIntegerField(blank=True, null=True)
    attempted_passes = models.BigIntegerField(blank=True, null=True)
    big_chances_created = models.BigIntegerField(blank=True, null=True)
    big_chances_missed = models.BigIntegerField(blank=True, null=True)
    bonus = models.BigIntegerField(blank=True, null=True)
    bps = models.BigIntegerField(blank=True, null=True)
    clean_sheets = models.BigIntegerField(blank=True, null=True)
    clearances_blocks_interceptions = models.BigIntegerField(blank=True, null=True)
    completed_passes = models.BigIntegerField(blank=True, null=True)
    creativity = models.TextField(blank=True, null=True)
    dribbles = models.BigIntegerField(blank=True, null=True)
    ea_index = models.BigIntegerField(blank=True, null=True)
    errors_leading_to_goal = models.BigIntegerField(blank=True, null=True)
    errors_leading_to_goal_attempt = models.BigIntegerField(blank=True, null=True)
    fixture = models.BigIntegerField(blank=True, null=True)
    fouls = models.BigIntegerField(blank=True, null=True)
    goals_conceded = models.BigIntegerField(blank=True, null=True)
    goals_scored = models.BigIntegerField(blank=True, null=True)
    ict_index = models.TextField(blank=True, null=True)
    id_x = models.BigIntegerField(blank=True, null=True)
    influence = models.TextField(blank=True, null=True)
    key_passes = models.BigIntegerField(blank=True, null=True)
    kickoff_time = models.TextField(blank=True, null=True)
    kickoff_time_formatted = models.TextField(blank=True, null=True)
    loaned_in = models.BigIntegerField(blank=True, null=True)
    loaned_out = models.BigIntegerField(blank=True, null=True)
    minutes = models.BigIntegerField(blank=True, null=True)
    offside = models.BigIntegerField(blank=True, null=True)
    open_play_crosses = models.BigIntegerField(blank=True, null=True)
    opponent_team = models.BigIntegerField(blank=True, null=True)
    own_goals = models.BigIntegerField(blank=True, null=True)
    penalties_conceded = models.BigIntegerField(blank=True, null=True)
    penalties_missed = models.BigIntegerField(blank=True, null=True)
    penalties_saved = models.BigIntegerField(blank=True, null=True)
    recoveries = models.BigIntegerField(blank=True, null=True)
    red_cards = models.BigIntegerField(blank=True, null=True)
    saves = models.BigIntegerField(blank=True, null=True)
    selected = models.BigIntegerField(blank=True, null=True)
    tackled = models.BigIntegerField(blank=True, null=True)
    tackles = models.BigIntegerField(blank=True, null=True)
    target_missed = models.BigIntegerField(blank=True, null=True)
    team_a_score = models.BigIntegerField(blank=True, null=True)
    team_h_score = models.BigIntegerField(blank=True, null=True)
    threat = models.TextField(blank=True, null=True)
    total_points = models.BigIntegerField(blank=True, null=True)
    transfers_balance = models.BigIntegerField(blank=True, null=True)
    transfers_in = models.BigIntegerField(blank=True, null=True)
    transfers_out = models.BigIntegerField(blank=True, null=True)
    value = models.BigIntegerField(blank=True, null=True)
    was_home = models.BooleanField(blank=True, null=True)
    winning_goals = models.BigIntegerField(blank=True, null=True)
    yellow_cards = models.BigIntegerField(blank=True, null=True)
    entry_name = models.TextField(blank=True, null=True)
    event_total = models.BigIntegerField(blank=True, null=True)
    id_y = models.BigIntegerField(blank=True, null=True)
    last_rank = models.BigIntegerField(blank=True, null=True)
    league = models.BigIntegerField(blank=True, null=True)
    movement = models.TextField(blank=True, null=True)
    own_entry = models.BooleanField(blank=True, null=True)
    player_name = models.TextField(blank=True, null=True)
    rank = models.BigIntegerField(blank=True, null=True)
    rank_sort = models.BigIntegerField(blank=True, null=True)
    start_event = models.BigIntegerField(blank=True, null=True)
    stop_event = models.BigIntegerField(blank=True, null=True)
    total = models.BigIntegerField(blank=True, null=True)
    chip = models.FloatField(blank=True, null=True)
    event = models.FloatField(blank=True, null=True)
    name = models.TextField(blank=True, null=True)
    played_time_formatted = models.TextField(blank=True, null=True)
    status = models.TextField(blank=True, null=True)
    time = models.TextField(blank=True, null=True)
    total_captain_point_multiplier = models.BigIntegerField(blank=True, null=True)
    total_captain_points = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'df_captains'


class DfElements(models.Model):
    index = models.BigIntegerField(blank=True, null=True)
    assists = models.BigIntegerField(blank=True, null=True)
    bonus = models.BigIntegerField(blank=True, null=True)
    bps = models.BigIntegerField(blank=True, null=True)
    chance_of_playing_next_round = models.FloatField(blank=True, null=True)
    chance_of_playing_this_round = models.FloatField(blank=True, null=True)
    clean_sheets = models.BigIntegerField(blank=True, null=True)
    code = models.BigIntegerField(blank=True, null=True)
    cost_change_event = models.BigIntegerField(blank=True, null=True)
    cost_change_event_fall = models.BigIntegerField(blank=True, null=True)
    cost_change_start = models.BigIntegerField(blank=True, null=True)
    cost_change_start_fall = models.BigIntegerField(blank=True, null=True)
    creativity = models.TextField(blank=True, null=True)
    dreamteam_count = models.BigIntegerField(blank=True, null=True)
    ea_index = models.BigIntegerField(blank=True, null=True)
    element_type = models.BigIntegerField(blank=True, null=True)
    ep_next = models.TextField(blank=True, null=True)
    ep_this = models.TextField(blank=True, null=True)
    event_points = models.BigIntegerField(blank=True, null=True)
    first_name = models.TextField(blank=True, null=True)
    form = models.TextField(blank=True, null=True)
    goals_conceded = models.BigIntegerField(blank=True, null=True)
    goals_scored = models.BigIntegerField(blank=True, null=True)
    ict_index = models.TextField(blank=True, null=True)
    id = models.BigIntegerField(blank=True, null=True)
    in_dreamteam = models.BooleanField(blank=True, null=True)
    influence = models.TextField(blank=True, null=True)
    loaned_in = models.BigIntegerField(blank=True, null=True)
    loaned_out = models.BigIntegerField(blank=True, null=True)
    loans_in = models.BigIntegerField(blank=True, null=True)
    loans_out = models.BigIntegerField(blank=True, null=True)
    minutes = models.BigIntegerField(blank=True, null=True)
    news = models.TextField(blank=True, null=True)
    news_added = models.TextField(blank=True, null=True)
    now_cost = models.BigIntegerField(blank=True, null=True)
    own_goals = models.BigIntegerField(blank=True, null=True)
    penalties_missed = models.BigIntegerField(blank=True, null=True)
    penalties_saved = models.BigIntegerField(blank=True, null=True)
    photo = models.TextField(blank=True, null=True)
    points_per_game = models.TextField(blank=True, null=True)
    red_cards = models.BigIntegerField(blank=True, null=True)
    saves = models.BigIntegerField(blank=True, null=True)
    second_name = models.TextField(blank=True, null=True)
    selected_by_percent = models.TextField(blank=True, null=True)
    special = models.BooleanField(blank=True, null=True)
    squad_number = models.FloatField(blank=True, null=True)
    status = models.TextField(blank=True, null=True)
    team = models.BigIntegerField(blank=True, null=True)
    team_code = models.BigIntegerField(blank=True, null=True)
    threat = models.TextField(blank=True, null=True)
    total_points = models.BigIntegerField(blank=True, null=True)
    transfers_in = models.BigIntegerField(blank=True, null=True)
    transfers_in_event = models.BigIntegerField(blank=True, null=True)
    transfers_out = models.BigIntegerField(blank=True, null=True)
    transfers_out_event = models.BigIntegerField(blank=True, null=True)
    value_form = models.TextField(blank=True, null=True)
    value_season = models.TextField(blank=True, null=True)
    web_name = models.TextField(blank=True, null=True)
    yellow_cards = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'df_elements'


class DfLeagueStandings(models.Model):
    index = models.BigIntegerField(blank=True, null=True)
    entry = models.BigIntegerField(blank=True, null=True)
    entry_name = models.TextField(blank=True, null=True)
    event_total = models.BigIntegerField(blank=True, null=True)
    id = models.BigIntegerField(blank=True, null=True)
    last_rank = models.BigIntegerField(blank=True, null=True)
    league = models.BigIntegerField(blank=True, null=True)
    movement = models.TextField(blank=True, null=True)
    own_entry = models.BooleanField(blank=True, null=True)
    player_name = models.TextField(blank=True, null=True)
    rank = models.BigIntegerField(blank=True, null=True)
    rank_sort = models.BigIntegerField(blank=True, null=True)
    start_event = models.BigIntegerField(blank=True, null=True)
    stop_event = models.BigIntegerField(blank=True, null=True)
    total = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'df_league_standings'


class DfManagerChips(models.Model):
    index = models.BigIntegerField(blank=True, null=True)
    chip = models.BigIntegerField(blank=True, null=True)
    entry = models.BigIntegerField(blank=True, null=True)
    event = models.BigIntegerField(blank=True, null=True)
    name = models.TextField(blank=True, null=True)
    played_time_formatted = models.TextField(blank=True, null=True)
    status = models.TextField(blank=True, null=True)
    time = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'df_manager_chips'


class DfManagerChipsNames(models.Model):
    index = models.BigIntegerField(blank=True, null=True)
    chip = models.BigIntegerField(blank=True, null=True)
    entry = models.BigIntegerField(blank=True, null=True)
    event = models.BigIntegerField(blank=True, null=True)
    name = models.TextField(blank=True, null=True)
    played_time_formatted = models.TextField(blank=True, null=True)
    status = models.TextField(blank=True, null=True)
    time = models.TextField(blank=True, null=True)
    entry_name = models.TextField(blank=True, null=True)
    event_total = models.BigIntegerField(blank=True, null=True)
    id = models.BigIntegerField(blank=True, null=True)
    last_rank = models.BigIntegerField(blank=True, null=True)
    league = models.BigIntegerField(blank=True, null=True)
    movement = models.TextField(blank=True, null=True)
    own_entry = models.BooleanField(blank=True, null=True)
    player_name = models.TextField(blank=True, null=True)
    rank = models.BigIntegerField(blank=True, null=True)
    rank_sort = models.BigIntegerField(blank=True, null=True)
    start_event = models.BigIntegerField(blank=True, null=True)
    stop_event = models.BigIntegerField(blank=True, null=True)
    total = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'df_manager_chips_names'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class HelloGreeting(models.Model):
    when = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'hello_greeting'


class ReportCaptainPoints(models.Model):
    index = models.BigIntegerField(blank=True, null=True)
    player_name = models.TextField(blank=True, null=True)
    total_points = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_captain_points'


class ReportChipsPlayed(models.Model):
    index = models.BigIntegerField(blank=True, null=True)
    player_name = models.TextField(blank=True, null=True)
    name = models.TextField(blank=True, null=True)
    played_time_formatted = models.TextField(blank=True, null=True)
    event = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_chips_played'


class ReportPointBurner(models.Model):
    index = models.BigIntegerField(blank=True, null=True)
    player_name = models.TextField(blank=True, null=True)
    points_on_bench = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_point_burner'


class ReportTransferCosts(models.Model):
    index = models.BigIntegerField(blank=True, null=True)
    player_name = models.TextField(blank=True, null=True)
    event_transfers_cost = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'report_transfer_costs'
